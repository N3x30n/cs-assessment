In my testing that doublerAppend function scales much better to larger numbers than the doublerInsert function due to doublerAppend having a linear runtime complexity where the size of the input array directly correlates to the length it takes for the function to complete. However the doublerInsert function is an exponential runtime complexity because it uses a much more complicated syntax that takes the computer a while to process under the hood of JavaScript. In my testing the doublerInsert function took about 700ms to run the extraLargeArray as an input and aroound 7ms for the largeArray, where as the doublerAppend function took a fraction of the time being about 3ms to complete the extraLargeArray as an input and 117.5 nanoseconds for the largeArray. The main difference between the two inputs is extraLargeArray is 10x bigger than largeArray and the doublerAppend function took around 10x the amount of time to complete, where the doublerInsert took almost 100x more time to complete.